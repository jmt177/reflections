What happens when you initialize a repository? Why do you need to do it?
A .git file is created, which tracks future changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It is an intermediary. It contains only those files from the working directory you have entered, and the repository contains none of them. Beyond the simple answer, it allows a moment to reflect on possible
mistakes, why would it be useful? The only difference is the working directory has those versions andthe repository doesn't. It is a bit of abstraction.

How can you use the staging area to make sure you have one commit per logical change?
by comparing the working directory to the staging area, to determine what has been changed that you want to commit, then add those to the staging area. Again, run git diff --staged to view the difference between the staging area and the most recent commit to see a final comparison before you decide to commit. Naturally, if you strive for one logical change per commit it is here you would see if you are true to that idea.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Trying out conflicting ways of doing the same thing to see which is better. Then the copies exist to view, even if they are never chosen. Also serves to better keep track of multiple versions in general, makes updating more logical to follow and easier to understand. Essentially, branch is good for alterations.
Intervew:context switching. New feature, fix bug, time to create a new branch. Mast branch is production quality, development branch where active work takes place. experimental branch with things being worked on but known and expected to break.

How do the diagrams help you visualize the branch structure?
diagrams show the history of commits, and how different branches are related. Also, what can and cannot be reached from a particular commit.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is adding together the work done in both. The commit to retain the most of is the one the other is merged into. It is represented in the diagram in such a way so it makes sense and follows how git stores and accesses past commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging removes a lot of tedious, generally unnecessary work. However, it does run the risk of mistakes slipping through, as a machine does not always recognize whether or not to include changes. Manually mergine is a great deal of effort and allows for human error at all times, but also removes the chance of the machine automatically combining in ways that may be unwanted.
